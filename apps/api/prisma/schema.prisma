generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  ADMIM
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(CLIENT)

  favoriteDishes FavoriteDishes[]
  orders         Order[]

  @@map("users")
}

model FavoriteDishes {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  dish      Dish     @relation(fields: [dishId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  dishId String @map("dish_id")

  @@unique([userId, dishId])
  @@map("favorite_dishes")
}

model Dish {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String
  price       Int
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  categoryId  String    @map("category_id")

  category Category @relation(fields: [categoryId], references: [id])

  attachments Attachment[]
  ingredients Ingredient[]
  orderItems  OrderItem[]
  favoriteOf  FavoriteDishes[]

  @@map("dishes")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  dish Dish[]

  @@map("categories")
}

enum OrderStatus {
  PENDING
  PREPARING
  DELIVERED
  CANCELED
}

model Order {
  id           String      @id @default(uuid())
  code         String
  status       OrderStatus @default(PENDING)
  orderDetails String
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime?   @updatedAt @map("updated_at")
  userId       String      @map("user_id")

  user User @relation(fields: [userId], references: [id])

  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String      @id @default(uuid())
  quantity  Int
  status    OrderStatus @default(PENDING)
  updatedAt DateTime?   @updatedAt @map("updated_at")
  orderId   String      @map("order_id")
  dishId    String      @map("dish_id")

  order Order @relation(fields: [orderId], references: [id])
  dish  Dish  @relation(fields: [dishId], references: [id])

  @@map("order_items")
}

model Ingredient {
  id     String  @id @default(uuid())
  name   String
  dishId String? @map("dish_id")

  dish Dish? @relation(fields: [dishId], references: [id])

  @@map("ingredients")
}

model Attachment {
  id     String  @id @default(uuid())
  title  String
  url    String
  dishId String? @map("dish_id")

  dish Dish? @relation(fields: [dishId], references: [id])

  @@map("attachments")
}
